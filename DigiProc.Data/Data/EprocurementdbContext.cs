// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DigiProc.Models.Domain;

namespace DigiProc.Data.Data
{
    public partial class EprocurementdbContext : DbContext
    {
        public EprocurementdbContext()
        {
        }

        public EprocurementdbContext(DbContextOptions<EprocurementdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Committee> Committees { get; set; }
        public virtual DbSet<CommitteeMember> CommitteeMembers { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<Lpo> Lpos { get; set; }
        public virtual DbSet<PriorityType> PriorityTypes { get; set; }
        public virtual DbSet<Requisition> Requisitions { get; set; }
        public virtual DbSet<RequisitionItem> RequisitionItems { get; set; }
        public virtual DbSet<RequisitionStatus> RequisitionStatuses { get; set; }
        public virtual DbSet<RequisitionType> RequisitionTypes { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Currency>(entity =>
            {
                entity.Property(e => e.CurrencyName).HasComment("the name of the currency");

                entity.Property(e => e.CurrencySymbol)
                    .IsFixedLength()
                    .HasComment("the symbol of the currency");
            });

            modelBuilder.Entity<FinancialYear>(entity =>
            {
                entity.Property(e => e.FinancialYrId).HasComment("primary key");

                entity.Property(e => e.FinancialYr)
                    .IsFixedLength()
                    .HasComment("the financial year in question. limited to char(9) eg: 2022-2023");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.Property(e => e.ItemId).HasComment("the primary key of Items");

                entity.Property(e => e.ItemCode).HasComment("the item code");

                entity.Property(e => e.ItemDescription).HasComment("the description for the item");

                entity.Property(e => e.ItemName).HasComment("the name of the item");

                entity.Property(e => e.MinStockLevel).HasComment("minimum stock level");
            });

            modelBuilder.Entity<PriorityType>(entity =>
            {
                entity.Property(e => e.PriorityId).HasComment("primary key for the Priority lookup");

                entity.Property(e => e.PriorityDescription).HasComment("priority description");
            });

            modelBuilder.Entity<Requisition>(entity =>
            {
                entity.Property(e => e.RequisitionId).HasComment("primary key");

                entity.Property(e => e.CompanyId).HasComment("the ID of the company..(usually the company in which system is installed)");

                entity.Property(e => e.CurrencyId).HasComment("the currency in which requisition is being quoted");

                entity.Property(e => e.DepartmentId).HasComment("the department initiating the requisition");

                entity.Property(e => e.FinancialYrId).HasComment("the ID of the financial year");

                entity.Property(e => e.Location).HasComment("the location of the company");

                entity.Property(e => e.PriorityId).HasComment("the ID depicting the priority level for this requisition");

                entity.Property(e => e.RequestedById).HasComment("the ID of the requester");

                entity.Property(e => e.RequisitionDescription).HasComment("the general purpose of the requisition");

                entity.Property(e => e.RequisitionNo).HasComment("requisition number");

                entity.Property(e => e.RequisitionTotal).HasComment("the estimated total of the Requisition");

                entity.Property(e => e.RequisitionTypeId).HasComment("the type of requisition (i.e. Purchase, Rent or Service)");
            });

            modelBuilder.Entity<RequisitionItem>(entity =>
            {
                entity.Property(e => e.RequisitionItemId).HasComment("primary key for the table entity");

                entity.Property(e => e.ItemAmount).HasComment("Quantity x Rate gives ITEM AMOUNT");

                entity.Property(e => e.ItemId).HasComment("the ID of the item");

                entity.Property(e => e.ItemRate).HasComment("the rate for the item being requisitioned");

                entity.Property(e => e.Quantity).HasComment("the quantity being requisitioned");

                entity.Property(e => e.RequisitionId).HasComment("the ID of the requisition");
            });

            modelBuilder.Entity<RequisitionStatus>(entity =>
            {
                entity.Property(e => e.RequisitionStatusId).HasComment("primary key");

                entity.Property(e => e.RequisitionStatusDesc).HasComment("the current status of a requisition");
            });

            modelBuilder.Entity<RequisitionType>(entity =>
            {
                entity.Property(e => e.RequisitionId).HasComment("primary key for the requisition");

                entity.Property(e => e.RequisitionDescription).HasComment("the description for the requistion");

                entity.Property(e => e.RequisitionType1).HasComment("the type of requisition");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.CompanyContact).HasComment("the contact of the company");

                entity.Property(e => e.CompanyEmailAddress).HasComment("the email address of the company");

                entity.Property(e => e.CompanyRegistrationNo).HasComment("the company registration number of the vendor");

                entity.Property(e => e.CompanyWebsite).HasComment("the website or social media presence of the company/vendor");
            });

            OnModelCreatingPartial(modelBuilder);
        }


        #region MSSQL Database-configuration

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            builder.UseSqlServer(@"Data Source=10.150.0.19;Initial Catalog=EProcurementDb;User ID=sa;Password=$Passw0rd");
        }

        #endregion
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}